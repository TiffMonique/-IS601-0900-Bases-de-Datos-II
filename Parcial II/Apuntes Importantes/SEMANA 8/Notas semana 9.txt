----Clase 9----Funciones de los subprogramas de Oracle

--Las funciones es parte de los subprogramas disponibles en oracle, podremos hacer uso de las funciones cada vez que nosotros
--lo deseemos, cada vez que queramos llamar de forma en especifico

---Una funcion la vamos a utilizar cuando queremos retornar un valor
--con un procedimiento lo vamos atilizar cuando no queremos retornar valores.
 podremos simular el retorno de un valor , con un parametro de salida.
un parametro puede retornar un valor y tenemos un valor de retorno.


CREATE OR REPLACE FUNCTION <NOMBRE DE FUNCION> (<PARAMETROS>) //PODEMOS HACER USO DE PRAMETROS PARA RETORNAR MAS DE UN VALOR
RETURN <TIPO DE DATO> //SOLO UN TIPO DE DATO DE RETORNO

IS
    <DECALRACION DE VARIABLES>

BEGIN
    <CUERPO DE LA FUNCION>
    RETURN <VALOR O VARIBALE A RETORNAR>

    <BLOQUE DE EXCEPCIONES>

END;


****SE CREARA EL SIGUIENTE PROCEDIMIENTO COMO UNA FUNCION

create or replace PROCEDURE SP_CANT_PRODUCTOS

IS
    CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*) INTO CANTIDAD FROM PRODUCTS;
    DBMS_OUTPUT.PUT_LINE('LA CANTIDAD DE PRODUCTOS GUARDADOS ES: '||CANTIDAD);
END;

*******FUNCION DEL PROCEDIMIENTO ALMACENADO ANTERIOR******
CREATE OR REPLACE FUNCTION FN_CANTIDAD_PRODUCTOS
RETURN NUMBER
IS
    CANTIDAD_PRODUCTOS NUMBER;
BEGIN   
    SELECT COUNT(*) INTO CANTIDAD_PRODUCTOS FROM PRODUCTS;
    RETURN CANTIDAD_PRODUCTOS;
END;

***FORMA 1 DE ejecutar LA FUNCION
SELECT FN_CANTIDAD_PRODUCTOS FROM DUAL;

***FORMA 2 DE EJECUTAR LA FUNCION

BEGIN
    DBMS_OUTPUT.PUT_LINE('LA CANTIDAD DE PRODUCTOS ES: '||FN_CANTIDAD_PRODUCTOS);

END;


****FORMA 3 DE EJECUTAR UNA FUNCION
DECLARE
    TOTAL_PRODUCTOS NUMBER;
BEGIN
    TOTAL_PRODUCTOS:=FN_CANTIDAD_PRODUCTOS;
    DBMS_OUTPUT.PUT_LINE('LA CANTIDAD DE PRODUCTOS ES: '||TOTAL_PRODUCTOS);
END;






--------CONVERSION DE PROCEDIMIENTO ALMACENADO : SP_OBTENER_NOMB_CAT A FUNCION--------------------
create or replace PROCEDURE SP_OBTENER_NOMB_CAT (IDCAT IN NUMBER, NOMBRE_CAT IN OUT CATEGORIES.CATEGORY_NAME%TYPE)

IS

BEGIN
    SELECT CATEGORIES.CATEGORY_NAME INTO NOMBRE_CAT FROM CATEGORIES WHERE CATEGORY_ID=IDCAT;

END;



----FUNCION 
CREATE OR REPLACE FUNCTION FN_NOMBRE_CATEGORIA(ID_CAT NUMBER)
RETURN VARCHAR2
IS
    NOMBRE_CATEGORIA CATEGORIES.CATEGORY_NAME%TYPE;
BEGIN
    SELECT CATEGORY_NAME INTO NOMBRE_CATEGORIA FROM CATEGORIES WHERE CATEGORY_ID=ID_CAT;  
    
    RETURN NOMBRE_CATEGORIA;
END;


-PARA MOSTRAR EL VALOR DE RETORNO DE LA FUNCION
DECLARE
    NOMBRE CATEGORIES.CATEGORY_NAME%TYPE;
BEGIN
    NOMBRE:=FN_NOMBRE_CATEGORIA2(4);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA CATEGORIA ES: '||NOMBRE);
END;

----Haremos un cambio en la funcion anterior, usaremos un parametro de salida en la funcion lo que hare tambien
es retornar el nombre,  y en ambos casos se debe de imprimir el mismo nombre----

CREATE OR REPLACE FUNCTION FN_NOMBRE_CATEGORIA(ID_CAT NUMBER,NOMB_CAT OUT VARCHAR2)
RETURN VARCHAR2
IS
    NOMBRE_CATEGORIA CATEGORIES.CATEGORY_NAME%TYPE;
BEGIN
    SELECT CATEGORY_NAME INTO NOMBRE_CATEGORIA FROM CATEGORIES WHERE CATEGORY_ID=ID_CAT;  
    NOMB_CAT =NOMBRE_CATEGORIA;
    
    RETURN NOMBRE_CATEGORIA;
END;


----BLOQUE ANONIMO PARA MOSTRAR EL RETORNO DE LA FUNCION----
DECLARE
    NOMBRE_FUNCION CATEGORIES.CATEGORY_NAME%TYPE;
    NOM_PARAMETRO CATEGORIES.CATEGORY_NAME%TYPE;

BEGIN
    NOMBRE_FUNCION:=FN_NOMBRE_CATEGORIA2(4, NOMBRE_PARAMETRO);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA CATEGORIA QUE RETORNA LA FUNCION ES: '||NOMBRE_FUNCION);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA CATEGORIA QUE RETORNA EL PARAMETRO ES: '||NOM_PARAMETRO);

END;





--------------------------------------CLASE 2------------------------------------------

--CREAR UNA FUNCION QUE OBTENGA LOS CAMPOS NOMBRE DE TIENDA, TELEFONO, CORREO Y CALLE DE LA TABLA STORES
Y ESTO SE VA A RETORNAR EN BASE AL ID DE TIENDA


CREATE OR REPLACE FUNCTION FN_DATOS_TIENDA(ID_TIENDA STORES.STORE_ID%TYPE, TELEFONO OUT STORES.PHONE%TYPE,
CORREO OUT STORES.EMAIL%TYPE, DIRECCION OUT STORES.STREET%TYPE)
RETURN VARCHAR2

IS 
    NOMBRE_TIENDA STORES.STORE_NAME%TYPE;

BEGIN

    SELECT STORE_NAME , PHONE, EMAIL , STREET INTO NOMBRE_TIENDA, TELEFONO , CORREO ,DIRECCION FROM STORES WHERE
    STORE_ID =ID_TIENDA;

    RETURN NOMBRE_TIENDA;

END;
  

-----PARA EJECUTAR LA FUNCION---------
DECLARE
    NOMBRE_TIENDA STORES.STORE_NOMBRE_TIENDA%TYPE, TELEFONO OUT STORES.PHONE%TYPE,
    CORREO OUT STORES.EMAIL%TYPE, DIRECCION OUT STORES.STREET%TYPE

BEGIN
    NOMBRE_TIENDA := FN_DATOS_TIENDA (2, TELEFONO ,CORREO , DIRECCION );
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA TIENDA ES: '||NOMBRE_TIENDA);
    DBMS_OUTPUT.PUT_LINE('EL TELEFONO DE LA TIENDA ES: '||TELEFONO);
    DBMS_OUTPUT.PUT_LINE('EL CORREO DE LA TIENDA ES: '||CORREO);
    DBMS_OUTPUT.PUT_LINE('LA DIRECCION DE LA TIENDA ES: '||DIRECCION);
END;



******lo anterior no es muy efectivo ya que si estamos retornando muchos campos tendriasmoa que colocarlos uno a uno
tendriamos demasido parametros de salida.

lo haremos de la siguiente manera, eliminaremos todos los parametros de salida y solo vamos a obtener ese registro en particular




CREATE OR REPLACE FUNCTION FN_DATOS_REG_TIENDA(ID_TIENDA STORES.STORE_ID%TYPE)
RETURN STORES%ROWTYPE

IS 
    REGISTRO STORES%ROWTYPE;

BEGIN

    SELECT * INTO REGISTRO FROM STORES WHERE STORE_ID =ID_TIENDA;

    RETURN REGISTRO;

END;

-----PARA QUE UNA FUNCION RETORNE UN REGISTO COMPLETO DE UNA TABLA---------
DECLARE
    REG STORES%ROWTYPE;

BEGIN
    NOMBRE_TIENDA := FN_DATOS_REG_TIENDA (2);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA TIENDA ES: '||REG.STORE_NAME);
    DBMS_OUTPUT.PUT_LINE('EL TELEFONO DE LA TIENDA ES: '||REG.PHONE);
    DBMS_OUTPUT.PUT_LINE('EL CORREO DE LA TIENDA ES: '||REG.EMAIL);
    DBMS_OUTPUT.PUT_LINE('LA DIRECCION DE LA TIENDA ES: '||REG.STREET);
    DBMS_OUTPUT.PUT_LINE('LA DIRECCION DE LA TIENDA ES: '||REG.CITY);
END;




-----------------------CLASE 11------------------------------
CUANDO ESTUVIMOS VIENDO LA PARTE DE LOS BLOQUES ANONIMOS UTILIZAMOS CURSORES PARA RETORNAR VARIOS REGISTROS
ESA LOGICA LA VAMOS A APLICAR PARA QUE RETORNE CARIOS REGISTROS

---VAMOS A CREAR UNA FUNCION QUE RETORNE TODAS LAS CATEGORIAS

CREATE OR REPLACE FUNCTION FN_INF_CATEGORIAS
RETURN SYS_REFCURSOR

IS
    CDATOS SYS_REFCURSOR;

BEGIN
    OPEN CDATOS FOR SELECT CATEGORY_ID, CATEGORY_NAME FROM CATEGORIES;
    RETURN CDATOS;

END;

DECLARE
    DATOS_CAT SYS_REFCURSOR;
    REGISTRO CATEGORIES%ROWTYPE;

BEGIN
    DATOS_CAT :=FN_INF_CATEGORIAS;

    LOOP
        FETCH DATOS_CAT INTO REGISTRO;
        EXIT WHEN DATOS_CAT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EL ID DE LA CATEGORIA ES: '||REGISTRO.CATEGORY_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA CATEGORIA ES: '||REGISTRO.CATEGORY_NAME);
    END LOOP;
END;



*****CREAR UNA FUNCION QUE RETORNE TODAS LAS ORDENES Y LOS CLIENTES QUE HAN HECHO LAS ORDENES******
----SE DEBEN RETORNAR LA FECHA EN QEU SE ENVIO LA ORDEN EL CAMPO ORDER_ID, ORDER_DATE, SHIPPED_DATE, 
    CUSTOMER_ID, FIRST_NAME, LAST_NAME


CREATE OR REPLACE FUNCTION FN_INF_ORDER_CLIENTES
RETURN SYS_REFCURSOR

IS
    CDATOS SYS_REFCURSOR;

BEGIN
    OPEN CDATOS FOR SELECT ORDERS.ORDER_ID, ORDERS.ORDER_DATE, ORDERS.SHIPPED_DATE,
    CUSTOMERS.CUSTOMER_ID, CUSTOMERS.FIRST_NAME , CUSTOMERS.LAST_NAME FROM ORDERS INNER JOIN CUSTOMERS
    ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

    RETURN CDATOS;
END;

----QUE CAMBIOS VAMOS A TENER EN EL BLOQUE ANONIMO PARA QUE SE MUESTREN LOS REGISTROS-----
DECLARE
    DATOS_CAT SYS_REFCURSOR;
    REGISTRO CATEGORIES%ROWTYPE;

BEGIN
    DATOS_CAT := FN_INF_ORDER_CLIENTES;

    LOOP
        FETCH DATOS_CAT INTO REGISTRO;
        EXIT WHEN DATOS_CAT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EL ID DE LA CATEGORIA ES: '||REGISTRO.CATEGORY_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE LA CATEGORIA ES: '||REGISTRO.CATEGORY_NAME);
    END LOOP;
END;



----OTRA FORMA DE HACERLO-----
DECLARE

    DATOS_CAT SYS_REFCURSOR;

    ORDER_ID ORDERS.ORDER_ID%TYPE;
    ORDER_DATE ORDERS.ORDER_DATE%TYPE;
    SHIPPED_DATE ORDERS.SHIPPED_DATE%TYPE;
    CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE;
    FIRST_NAME CUSTOMERS.FIRST_NAME%TYPE;
    LAST_NAME CUSTOMERS.LAST_NAME%TYPE;

BEGIN
    DATOS_CAT := FN_INF_ORDER_CLIENTES;

    LOOP
        FETCH DATOS_CAT INTO ORDER_ID ,ORDER_DATE, SHIPPED_DATE, CUSTOMER_ID, FIRST_NAME, LAST_NAME;
        EXIT WHEN DATOS_CAT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EL ID DE LA ORDEN ES: '||ORDER_ID);
        DBMS_OUTPUT.PUT_LINE('LA FECHA DE ENVIO DE LA ORDEN ES: '||SHIPPED_DATE);
        DBMS_OUTPUT.PUT_LINE('EL ID DEL CLIENTE: '||CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL CLIENTE: '||FIRST_NAME);
        DBMS_OUTPUT.PUT_LINE('EL APELLIDO DEL CLIENTE ES: '||LAST_NAME);
        DBMS_OUTPUT.PUT_LINE(CHR(13));
    END LOOP;

END;



---------------------------CLASE 12-----------------------------

--vamos a ser como el bullcollect, hacer una estructura usando Type.-----
--utilizabamos la palabra type para crear una structura como un registro
vamos a crear una estructura para que 



--EL ORDEN DE LOS CAMPOS DECLARADOS DEBEN SER LOS MISMOS A LOS QUE TENEMOS EN LA FUNCION--

DECLARE
    DATOS_CAT SYS_REFCURSOR;

    TYPE FILA IS RECORD(    
    ORDER_ID ORDERS.ORDER_ID%TYPE,
    ORDER_DATE ORDERS.ORDER_DATE%TYPE,
    SHIPPED_DATE ORDERS.SHIPPED_DATE%TYPE,
    CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE,
    FIRST_NAME CUSTOMERS.FIRST_NAME%TYPE,
    LAST_NAME CUSTOMERS.LAST_NAME%TYPE
    );

    REGISTRO FILA;
BEGIN   
    DATOS_CAT := FN_INF_ORDER_CLIENTES;

    LOOP    
        FETCH DATOS_CAT INTO REGISTRO;
        EXIT WHEN DATOS_CAT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EL ID DE LA ORDEN ES: '||REGISTRO.ORDER_ID);
        DBMS_OUTPUT.PUT_LINE('LA FECHA DE ENVIO DE LA ORDEN ES: '||REGISTRO.SHIPPED_DATE);
        DBMS_OUTPUT.PUT_LINE('EL ID DEL CLIENTE: '||REGISTRO.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL CLIENTE: '||REGISTRO.FIRST_NAME);
        DBMS_OUTPUT.PUT_LINE('EL APELLIDO DEL CLIENTE ES: '||REGISTRO.LAST_NAME);
        DBMS_OUTPUT.PUT_LINE(CHR(13));
    END LOOP;

END;

*********DEBIDO QUE AL IMPRIMIR LOS DATOS APARECE COMO CADEN A, MODIFICAREMOS LA FUNCION PARA
QUE SE MUESTRE EN FORMATO FECHA



CREATE OR REPLACE FUNCTION FN_INF_ORDER_CLIENTES
RETURN SYS_REFCURSOR

IS
    CDATOS SYS_REFCURSOR;

BEGIN
    OPEN CDATOS FOR SELECT ORDERS.ORDER_ID, ORDERS.ORDER_DATE, 
    TO_TIMESTAMP(ORDERS.SHIPPED_DATE,'YYYYMMDD'),
    ORDERS.SHIPPED_DATE,
    CUSTOMERS.CUSTOMER_ID, CUSTOMERS.FIRST_NAME , CUSTOMERS.LAST_NAME FROM ORDERS INNER JOIN CUSTOMERS
    ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

    RETURN CDATOS;
END;


----indicar el cambio de FECHA

DECLARE
    DATOS_CAT SYS_REFCURSOR;

    TYPE FILA IS RECORD(    
    ORDER_ID ORDERS.ORDER_ID%TYPE,
    ORDER_DATE ORDERS.ORDER_DATE%TYPE,
    SHIPPED_DATE TIMESTAMP,
    CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE,
    FIRST_NAME CUSTOMERS.FIRST_NAME%TYPE,
    LAST_NAME CUSTOMERS.LAST_NAME%TYPE
    );

    REGISTRO FILA;
BEGIN   
    DATOS_CAT := FN_INF_ORDER_CLIENTES;

    LOOP    
        FETCH DATOS_CAT INTO REGISTRO;
        EXIT WHEN DATOS_CAT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EL ID DE LA ORDEN ES: '||REGISTRO.ORDER_ID);
        DBMS_OUTPUT.PUT_LINE('LA FECHA DE ENVIO DE LA ORDEN ES: '||REGISTRO.SHIPPED_DATE);
        DBMS_OUTPUT.PUT_LINE('EL ID DEL CLIENTE: '||REGISTRO.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL CLIENTE: '||REGISTRO.FIRST_NAME);
        DBMS_OUTPUT.PUT_LINE('EL APELLIDO DEL CLIENTE ES: '||REGISTRO.LAST_NAME);
        DBMS_OUTPUT.PUT_LINE(CHR(13));
    END LOOP;

END;


-----------------------CLASE 13-----------------------------
    INTRODUCCION A PAQUETES
------------------------------------------------------------
Es una estructura de encapsular tanto funciones, procedimentos y variables en un solo lugar
vamos a lamacenar funciones, varibles....

ejemplo, podemos crear un paquete para organizar el proceso de matricula en la universidad
el alumno puede ver las clases,  cancelar una clase.

Los paquetes son un subprograma de oracle. Porque quedan almacenados en nuestra Base de Datos.
LA SINTAXIS DE LOS PAQUETES ES:

CREATE OR REPLACE PACKAGE <NOMBRE DEL PAQUETE>


IS

    <CREAR VARIABLES>
    <INDICAR EL ENCABEZADO DE LOS PROCEDIMIENTOS>
    <INDICAR EL ENCABEZDO DE LOS PROCEDIMIENTOS>

END;

//CREACION DEL CUERPO DEL PAQUETE
CREATE OR REPLACE PACKAGE BODY <NOMBRE DEL PAQUETE>

IS

    <CUERPO DE LAS FUNCIONES>
    <CUERPO DE LOS PROCEDIMIENTOS>

END;

************EEJRCICIO DE PAQUETES
//VAMOS A RETORNAR EL NOMBRE DE LA TIENDA
CREATE OR REPLACE PACKAGE PK_INF_VENTA_BICICLETAS

IS

    NOMBRE VARCHAR2(500);
    FUNCTION FN_NOMBRE_TIENDA(ID_TIENDA STORES.STORES_ID%TYPE) RETURN VARCHAR2;
    PROCEDIMIENTO SP_INSERTA_BRAND (NOMBRE_MARCA BRAND.BRAND_NAME%TYPE);

END;

//CREACION DEL CUERPO DEL PAQUETE
CREATE OR REPLACE PACKAGE BODY PK_INF_VENTA_BICICLETAS

IS
    
    FUNCTION FN_NOMBRE_TIENDA(ID_TIENDA STORES.STORE_ID%TYPE) RETURN VARCHAR2
    IS
        NOMBRE_TIENDA STORES.STORE_NAME%TYPE;

    BEGIN
        SELECT STORE_NAME INTO NOMBRE_TIENDA FROM STORES WHERE STORE_ID = ID_TIENDA;
        NOMBRE := NOMBRE_TIENDA;

        RETURN NOMBRE;
    END;

    PROCEDURE SP_INSERTA_BRAND (NOMBRE_MARCA BRANDS.BRAND_NAME%TYPE)
    IS
    BEGIN
        INSERT INTO BRANDS (BRAND_NAME) VALUES (NOMBRE_MARCA);
        COMMIT;
    END;
    
END;

















