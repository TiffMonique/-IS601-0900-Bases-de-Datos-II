JOB>UNA TAREA PROGRAMADA QUE SE EJECUTA DE FORMA AUTOMATICA Y  QUE EJECUTA UN PROCEDIMIENTO O 
UNA FUNCION QUE ESTA A SU VEZ EJECUTAN UNA TAREA ESPECIFICA. Y NOSOTROS PODEMOS CONFIGURAR LOS DISTINTOS PARAMETROS
QUE UTILIZAMOS.

-----PROCEDIMIENTO DE PASAR LOS NOMBRES DE LAS MARCAS A MAYUSCULA---------

CREATE OR REPLACE PROCEDURE SP_NOMB_BRAND_MAYUS

IS

BEGIN
   UPDATE BRANDS SET BRAND_NAME=UPPER(BRAND_NAME);
   COMMIT;
END;


------------IMPLEMENTACION DEL JOB-----------
BEGIN
     DBMS_SCHEDULER.CREATE_JOB(
	JOB_NAME=>'JOB_MAYUS_BRAND_NAME',
	JOB_TYPE=>'STORED_PROCEDURE',
	JOB_ACTION=>'SP_NOMB_BRAND_MAYUS',
	NUMBER_OF_ARGUMENTS=>0,
	START_DATE=>'TO_TIMESTAMP('2020-03-31 09:31:00','YYYY-MM-DD HH24:MI:SS'),
	REPEAT_INTERVAL=>'FREQ=DAILY',
	ENABLED=>TRUE,
);
END;


------PRIVILEGIOS PARA CREAR JOS--------
GRANT CREATE ANY JOB TO ADMINISTRADOR_BD;


----RETORNAR LOS JOBS QUE SE HAN CREADO----------
SELECT * FROM USER_SCHEDULER_JOBS;

------CONSULTA PARA VER LOS JOBS QUE SE HAN EJECUTADO Y SI ESTOS HAN TENIDO EXITO EN SU EJECUCION----------
SELECT JOB_NAME, LOG_DATE, STATUS FROM USER_SCHEDULER_JOB_LOG;

--------EJECUTAR DE FORMA MANUAL EL JOB---------
BEGIN
	DBMS_SCHEDULER.RUN_JOB(
	 JOB_NAME=>'JOBS_MAYUS_BRAND_NAME'
	);
END;

--------FUNCION DROP JOB-------
BEGIN
	DBMS_SCHEDULER.DROP_JOB(
	 JOB_NAME=>'JOBS_MAYUS_BRAND_NAME'
	);
END;




*****************************CLASE 2*******************************
CREAR UN CAMPO IMPUESTO EN LA TABLA ORDER_ITEMS DE TIPO NUMBER(10,2)

Crear un job que llamara a un SP que recibe 2 parametros, uno para indicar el porcentaje del
impuesto y otro que sea un numero que indique a que productos actualizar el impuesto, es decir, si 
se actulizaran todos o solo los que tienen un valor de 0 o NULL. El valor 1 indicara que todos los productos
se deben actualizar y el valor 0 indicara que se deben actualizar todos los que tengan 0 o NULL como dato
en el campo impuesto de la tabla.

PASO 1
ALTER TABLE ORDER_ITEMS ADD (
	IMPUESTO NUMBER(10,2) DEFAULT NULL

);

PASO 2> CREAR EL PROCEDIMIENTO ALMACENADO
CREATE OR REPLACE PROCEDURE SP_CALCULA_IMPUESTO(VALOR_IMP NUMER, PROD_ACTUALIZAR NUMBER)

IS

BEGIN
     IF (PROD_ACTUALIZAR=0) THEN
	UPDATE ORDER_ITEMS SET IMPUESTO = (QUANTITY*LIST_PRICE)*VALOR_IMP WHERE IMPUESTO=0 OR IMPUESTO IS NULL;
     ELSE
	IF(PROD_ACTUALIZAR=1)THEN
		UPDATE ORDER_ITEMS SET IMPUESTO=(QUANTITY*LIST_PRICE)*VALOR_IMP;
		COMMIT;
	END IF;
	
     END IF;
END;


--------CREAR UN JOB----------
BEGIN 
     DBMS_SCHEDULER.CREATE_JOB(
	JOB_NAME=>'JOB_ACTUALIZA_IMPUESTO',
        JOB_TYPE=>'STORED_PROCEDURE', --se refiere al elemento que se va a ejecutar en este caso procedimiento
	JOB_ACTION=>'SP_CALCULA_IMPUESTO', --el nombre de lo que se esta ejecutando.
	NUMBER_OF_ARGUMENTS=>2, --en este caso recibe 2 parametros. y es importante para el ultimo elemento ENABLED
	START_DATE=>TO_TIMESTAMP('2021-01-28 09:30:00','YYYY-MM-DD HH24:MI:SS'),
	REPEAT_INTERVAL=>'FREQ=MONTHLY;BYMONTHLY;BYMONTHDAY=1;BYHOUR=10;BYMINUTE=0;BYSECOND=0', --
	ENABLED=>FALSE
);
END;

-------RECIBE PARAMENTROS EL SP ANTERIOS , NECESITAMOS CONFIGURAR PARAMETROS HAREMOS USO DE UNA FUNCION
BEGIN
	DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
	JOB_NAME=>'JOB_ACTUALIZA_IMPUESTO',
	ARGUMENT_POSITION=>1,
	ARGUMENT_VALUE=>0.15 --valores fijos
	);

	DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
	JOB_NAME=>'JOB_ACTUALIZA_IMPUESTO',
	ARGUMENT_POSITION=>2,
	ARGUMENT_VALUE=>1 ---valores fijos
	);
END;

------FUNCION PARA QUE SE EJECUTE
BEGIN
  DBMS_SCHEDULER.ENABLE('JOB_ACTUALIZA_IMPUESTO');
END;


----PARA BORRAR EL JOB
BEGIN
    DBMS_SCHEDULER.DROP_JOB(
	JOB_NAME=>'JOB_ACTUALIZA_IMPUESTO'
);
END;

---PARA VER LOS JOBS
SELECT JOB_NAME, LOG_DATE, STATUS FROM USER_SCHEDULER_JOB_LOG;


----EJECUTAR EL JOB DE FORMA MANUAL-----
BEGIN
	DBMS_SCHEDULER.RUN_JOB(
	 JOB_NAME=>'JOB_ACTUALIZA_IMPUESTO'
);

END;


*************************CLASE 3**************************
--SQL LOADER--
--NO HAY QUE REALIZAR INSERT, PARA CARGAR DATOS, SI NO QUE SIMPLEMENTE ESTABLECEMOS UN FORMATO DETERMINADO--
PARA PODER HACER ESTO TENEMOS QUE HACERLO  EN TRES PASOS.
1) CREAR UN ARCHIVO DE DATOS CON FORMATO .CSV --DATOS PARA CARGAR
2) CREAR UN ARCHIVO DE CONTROL .CTL --INDICAR EN QUE TABLA QUEREMOS CARGAR LOS DATOS Y COMO LOS VAMOS A INTERPRETAR LOS DATOS ALMACENADO EN EL ARCHIVO CSV
3) EJECUTAR EL COMANDO DE SQL LOADER. --EL COMANDO QUE EJECUTEMOS SE VA A ENCARGAR DE PROCESAR EL ARCHIVO CTL Y OBTERNER LOS COMPONENTES DEL CSV. ESTE SERA EL ULTIMO PASO LOS DOS ANTERIORS NO IMPORTA EN EL ORDEN QUE LOS HAGAMOS

PREPARE ARCHIVOS




OPTIONS (SKIP='1') --SE SALTA LA PRIMERA FILA
LOAD DATA --CARGAR DATOS
APPEND INTO TABLE STAFFS --APPEND SIG QUE SI LA TABLA YA TIENE REGISTROS, LOS VA A AGREGAR AL FINAL.Y SE MANTIENEN LOS REGISTROS QUE YA TENEMOS.

--YO PUEDO CARGAR DATOS EN BASE A UNA CONDICION

---SI QUEREMOS AGREGAR OTRO REGISTRO, SOLO SE CARGARA el registro no duplicado.
---se crea un archivo. bad con los registros que ya se habian registrado.


--ARCHIVO DE CONTROL = INTERPRETA LO QUE HAY EN EL ARCHIVO CSV

sqlldr bd_venta_bicicletas/123@XE control='C:\Users\Usuario\OneDrive\Documentos\Base de Datos II\PARCIAL III\control.ctl' data='C:\Users\Usuario\OneDrive\Documentos\Base de Datos II\PARCIAL III\carga_datos.csv'






